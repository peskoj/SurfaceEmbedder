#!/usr/bin/env python

import sys
import subprocess
import getopt
import io
import xml.parsers.expat
import re
import shlex

def print_tg6(g):
    print(template.format(g['repr'], g['label'], g['terminals']))

def call(command, input):
    process = subprocess.Popen([command], stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
    res = process.communicate(bytes(input + '\n', 'UTF-8'))
    return res[0].decode('UTF-8').strip()

def test_graph(g):
    #print(g)
    m = re.match("\((\d+), (\d+)\)", g['terminals'])
    assert m
    g['x'] = m.group(1)
    g['y'] = m.group(2)

    s = call('gconvert text', g['label'])
    #print(s)
    v = list(map(int, s.split()))
    print("graph G {")
    print("splines=True;")
    print("overlap=False;")
#    print("fontsize=30;")
    print("label=\"{0}\";".format(re.escape(g['label'])))
    print("node [shape=circle, style=filled, label=\"\", fixedsize=True];")
    print("edge [len=2];")
    print("n{0} [fillcolor=white];".format(g['x']))
    print("n{0} [fillcolor=white];".format(g['y']))

    for i in range(v[0]):
        print("n{0} [label={0}];".format(i))

    for i in range(v[1]):
        print("n{0} -- n{1}".format(v[2*i+2], v[2*i+3]))
    print("n{0}--n{1} [style=dotted];".format(g['x'], g['y']))

    print("}")

    

def parse_tg6():
    def start_element(name, attrs):
        if name == "graph":
            test_graph(attrs)

    def end_element(name):
        pass

    def char_data(data):
        pass

    p = xml.parsers.expat.ParserCreate()

    p.StartElementHandler = start_element
    p.EndElementHandler = end_element
    p.CharacterDataHandler = char_data

    document = ''.join(sys.stdin.readlines())
    #print(document)
    p.Parse("<root>" + document + "</root>")

    
template = "<graph repr=\"{0}\" label=\"{1}\" terminals=\"{2}\" />"

parse_tg6()
